Source Line  Source                                                                   CPU Time  Spin Time  Overhead Time
-----------  -----------------------------------------------------------------------  --------  ---------  -------------
10           static const double PI = 3.14159265358979323846;                                                           
11                                                                                                                      
12           //                                                                                                         
13           double RngStream_RandNormal(RngStream g)                                                                   
14           {                                                                                                          
15             double u1 = RngStream_RandU01(g);                                        0.002s         0s             0s
16             double u2 = RngStream_RandU01(g);                                        0.002s         0s             0s
17                                                                                                                      
18             return sqrt(-2*log(u1)) * cos(2*PI*u2);                                  0.004s         0s             0s
19           }                                                                                                          
20                                                                                                                      
21           //                                                                                                         
22           void RngStream_RandShuffle(RngStream g, int* index, int n)                                                 
23           {                                                                                                          
24             int i, j, temp;                                                                                          
25             #pragma vector aligned                                                                                   
26             for (int i = n - 1; i > 0; --i) {                                        0.225s         0s             0s
27               j = RngStream_RandInt(g, 0, i);                                        0.647s         0s             0s
28                                                                                                                      
29               temp = index[i];                                                       0.145s         0s             0s
30               index[i] = index[j];                                                   0.808s         0s             0s
31               index[j] = temp;                                                                                       
32             }                                                                                                        
33           }                                                                                                          
34                                                                                                                      
35           // X is a pxn matrix, XX is a nxn matrix                                                                   
36           void Double_Center(int n, int p, double *X, double *XX) {                                                  
37             double* row_sum = (double*) calloc(n, sizeof(double));                                                   
38             double* col_sum = (double*) calloc(n, sizeof(double));                                                   
39                                                                                                                      
40             double total_sum = 0.0;                                                                                  
41             double elem, part_sum;                                                                                   
42             int i, j, k;                                                                                             
43                                                                                                                      
44             #pragma vector aligned                                                                                   
45             for (j = 0; j < n; ++j) {                                                0.002s         0s             0s
46               #pragma vector aligned                                                                                 
47               for (i = 0; i < n; ++i) {                                              0.049s         0s             0s
48                 if (i != j) {                                                        0.005s         0s             0s
49                   part_sum = 0.0;                                                    0.011s         0s             0s
50                                                                                                                      
51                   //XX[i, j] = |X[i, ] - X[j, ]|                                                                     
52                   #pragma vector aligned                                                                             
53               for (k = 0; k < p; ++k) {                                              0.436s         0s             0s
54                     elem = X[i*p+k] - X[j*p+k];                                      0.181s         0s             0s
55                     part_sum += elem * elem;                                         0.153s         0s             0s
56                   }                                                                                                  
57                                                                                                                      
58                   part_sum = sqrt(part_sum);                                         0.012s         0s             0s
59                                                                                                                      
60                   XX[i+j*n] = part_sum;                                              0.008s         0s             0s
61                   row_sum[i] += part_sum;                                            0.413s         0s             0s
62                   col_sum[j] += part_sum;                                            0.156s         0s             0s
63                   total_sum += part_sum;                                             0.019s         0s             0s
64                 } else {                                                                                             
65                   XX[i+j*n] = 0.0;                                                   0.001s         0s             0s
66                 }                                                                                                    
67               }                                                                                                      
68             }                                                                                                        
69                                                                                                                      
70             #pragma vector aligned                                                                                   
71             for (j = 0; j < n; ++j) {                                                0.003s         0s             0s
72               #pragma vector aligned                                                                                 
73               for (i = 0; i < n; ++i) {                                              0.009s         0s             0s
74                 XX[i+j*n] -= row_sum[i] / n + col_sum[j] / n - total_sum / n / n;    0.077s         0s             0s
75               }                                                                                                      
76             }                                                                                                        
77                                                                                                                      
78             free(row_sum);                                                                                           
79             free(col_sum);                                                                                           
80           }                                                                                                          
81                                                                                                                      
82           // XX is a nxn matrix, YY is a nxn matrix                                                                  
83           double Inner_Prod(int n, double *XX, double *YY) {                                                         
84             double sum = 0.0;                                                                                        
85             int i, j;                                                                                                
86                                                                                                                      
87             #pragma vector aligned                                                                                   
88             for (j = 0; j < n; ++j) {                                                                                
89               #pragma vector aligned                                                                                 
90               for (i = 0; i < n; ++i) {                                              0.005s         0s             0s
91                 // XX[i, j] * YY[i, j]                                                                               
92                 sum += XX[i+j*n] * YY[i+j*n];                                        0.020s         0s             0s
93               }                                                                                                      
94             }                                                                                                        
95                                                                                                                      
96             return sum / n / n;                                                                                      
97           }                                                                                                          
98                                                                                                                      
99           // XX is a nxn matrix, YY is a nxn matrix                                                                  
100          double Inner_Prod_Perm(int n, int *P, double *XX, double *YY) {                                            
101            double sum = 0.0;                                                        0.005s         0s             0s
102            int i, j;                                                                                                
103                                                                                                                     
104            #pragma vector aligned                                                                                   
105            for (j = 0; j < n; ++j) {                                                0.033s         0s             0s
106              #pragma vector aligned                                                                                 
107              for (i = 0; i < n; ++i) {                                              2.491s         0s             0s
108                // XX[i, j] * YY[P[i], P[j]]                                                                         
109                sum += XX[i+j*n] * YY[P[i]+P[j]*n];                                 20.166s         0s             0s
110              }                                                                                                      
111            }                                                                                                        
112                                                                                                                     
113            return sum / n / n;                                                      0.002s         0s             0s
114          }                                                                                                          
115                                                                                                                     
116          //                                                                                                         
117          int main(int argc, char** argv)                                                                            
118          {                                                                                                          
119            //                                                                                                       
120            double t0 = omp_get_wtime();                                                                             
121                                                                                                                     
122            int i, j;                                                                                                
123            int nobs = 25;                                                                                           
124            int ndim = 5;                                                                                            
125            int nrep = 24;                                                                                           
126            int nperm = 100;                                                                                         
127            double alpha = 0.1;                                                                                      
128                                                                                                                     
129            extern char* optarg;                                                                                     
130            const char* optstring = "o:d:r:p:a:";                                                                    
131            int c;                                                                                                   
132            while ((c = getopt(argc, argv, optstring)) != -1) {                                                      
133              switch (c) {                                                                                           
134              case 'o': nobs = atoi(optarg); break; // number of observations                                        
135              case 'd': ndim = atoi(optarg); break; // number of dimensions                                          
136              case 'r': nrep = atoi(optarg); break; // number of repetitions                                         
137              case 'p': nperm = atoi(optarg); break; // number of permutations                                       
138              case 'a': alpha = atof(optarg); break; // significance level                                           
139              }                                                                                                      
140            }                                                                                                        
141                                                                                                                     
142            printf("====================\n");                                                                        
143            printf("nobs: %d\n", nobs);                                                                              
144            printf("ndim: %d\n", ndim);                                                                              
145            printf("nrep: %d\n", nrep);                                                                              
146            printf("nperm: %d\n", nperm);                                                                            
147            printf("alpha: %g\n", alpha);                                                                            
148                                                                                                                     
149            //                                                                                                       
150            unsigned long seed[6] = {1806547166, 3311292359,                                                         
151                         643431772, 1162448557,                                                                      
152                         3335719306, 4161054083};                                                                    
153            RngStream_SetPackageSeed(seed);                                                                          
154                                                                                                                     
155            RngStream RngArray[nrep];                                                                                
156            #pragma vector aligned                                                                                   
157            for (i = 0; i < nrep; ++i) {                                                                             
158              RngArray[i] = RngStream_CreateStream(NULL);                                                            
159            }                                                                                                        
160                                                                                                                     
161            //                                                                                                       
162            int* index;                                                                                              
163            double *x, *y, *xx, *yy;                                                                                 
164            double stat, stat_perm;                                                                                  
165            int count, local;                                                                                        
166            int global = 0;                                                                                          
167                                                                                                                     
168            index = (int*) malloc(nobs*sizeof(int));                                                                 
169            x = (double*) malloc(nobs*ndim*sizeof(double));                                                          
170            y = (double*) malloc(nobs*ndim*sizeof(double));                                                          
171            xx = (double*) malloc(nobs*nobs*sizeof(double));                                                         
172            yy = (double*) malloc(nobs*nobs*sizeof(double));                                                         
173            local = 0;                                                                                               
174                                                                                                                     
175            #pragma vector aligned                                                                                   
176            for (i = 0; i < nobs; ++i) {                                                                             
177              index[i] = i;                                                                                          
178            }                                                                                                        
179                                                                                                                     
180            #pragma vector aligned                                                                                   
181            for (j = 0; j < nrep; ++j) {                                                                             
182              #pragma vector aligned                                                                                 
183              for (i = 0; i < nobs*ndim; ++i) {                                      0.003s         0s             0s
184                x[i] = RngStream_RandNormal(RngArray[j]);                            0.007s         0s             0s
185              }                                                                                                      
186                                                                                                                     
187              #pragma vector aligned                                                                                 
188              for (i = 0; i < nobs*ndim; ++i) {                                      0.001s         0s             0s
189                y[i] = RngStream_RandNormal(RngArray[j]);                            0.003s         0s             0s
190              }                                                                                                      
191                                                                                                                     
192              Double_Center(nobs, ndim, x, xx);                                                                      
193              Double_Center(nobs, ndim, y, yy);                                                                      
194                                                                                                                     
195              stat = Inner_Prod(nobs, xx, yy);                                                                       
196              count = 0;                                                                                             
197                                                                                                                     
198              #pragma vector aligned                                                                                 
199              for (i = 0; i < nperm; ++i) {                                          0.004s         0s             0s
200                RngStream_RandShuffle(RngArray[j], index, nobs);                                                     
201                stat_perm = Inner_Prod_Perm(nobs, index, xx, yy);                                                    
202                if (stat_perm > stat) {                                                                              
203                  count += 1;                                                        0.007s         0s             0s
204                }                                                                                                    
205              }                                                                                                      
206                                                                                                                     
207              if ((double) count / nperm < alpha) {                                                                  
208                local += 1;                                                                                          
209              }                                                                                                      
210            }                                                                                                        
211                                                                                                                     
212            global += local;                                                                                         
213                                                                                                                     
214            free(index);                                                                                             
215            free(x);                                                                                                 
216            free(y);                                                                                                 
217            free(xx);                                                                                                
218            free(yy);                                                                                                
219                                                                                                                     
220            double t1 = omp_get_wtime();                                                                             
221                                                                                                                     
222            printf("====================\n");                                                                        
223            printf("size: %d / %d = %g\n", global, nrep, (double) global / nrep);                                    
224            printf("time: %g\n", t1-t0);                                                                             
225            printf("====================\n");                                                                        
226                                                                                                                     
227            return 0;                                                                                                
228          }                                                                                                          
