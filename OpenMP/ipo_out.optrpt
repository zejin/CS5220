
Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at tnt_array1d.h(256,2) inlined into driverLTM_openmp.cpp(28,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into driverLTM_openmp.cpp(28,33)
      remark #15389: vectorization support: reference p has unaligned access   [ tnt_array1d.h(257,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into driverLTM_openmp.cpp(28,33)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at tnt_array2d.h(117,2) inlined into driverLTM_openmp.cpp(28,33)
   remark #15389: vectorization support: reference data_ has unaligned access   [ tnt_array2d.h(119,6) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 2.580 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at funclass.cpp(128,5) inlined into driverLTM_openmp.cpp(29,3)
   remark #15389: vectorization support: reference data_ has unaligned access   [ funclass.cpp(129,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 8
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 13.000 
   remark #15478: estimated potential speedup: 0.370 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at funclass.cpp(130,5) inlined into driverLTM_openmp.cpp(29,3)
   remark #15389: vectorization support: reference data_ has unaligned access   [ funclass.cpp(131,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 8
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 13.000 
   remark #15478: estimated potential speedup: 0.370 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(33,3)
   remark #15389: vectorization support: reference pAlpha has unaligned access
   remark #15388: vectorization support: reference .L_2__cnst_pck.17.var has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: BLOCK WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 1.250 
   remark #15478: estimated potential speedup: 1.920 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(33,3)
<Remainder>
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(43,3)
<Peeled, Distributed chunk1>
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(43,3)
<Distributed chunk1>
   remark #15389: vectorization support: reference nSim has unaligned access   [ driverLTM_openmp.cpp(44,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 25 
   remark #15477: vector loop cost: 0.370 
   remark #15478: estimated potential speedup: 17.890 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(43,3)
<Remainder, Distributed chunk1>
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(43,3)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between rem line 45 and rem line 47
   remark #15346: vector dependence: assumed FLOW dependence between rem line 47 and rem line 45
   remark #15346: vector dependence: assumed FLOW dependence between rem line 47 and rem line 45
   remark #15346: vector dependence: assumed ANTI dependence between rem line 45 and rem line 47
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(43,3)
<Remainder, Distributed chunk2>
LOOP END

LOOP BEGIN at RngStream.cpp(213,5) inlined into driverLTM_openmp.cpp(55,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at RngStream.cpp(362,4) inlined into driverLTM_openmp.cpp(55,3)
   remark #15388: vectorization support: reference _ZN9RngStream8nextSeedE has aligned access   [ RngStream.cpp(363,7) ]
   remark #15388: vectorization support: reference seed has aligned access   [ RngStream.cpp(363,7) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(363,21) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 3.250 
   remark #15478: estimated potential speedup: 1.440 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at RngStream.cpp(362,4) inlined into driverLTM_openmp.cpp(55,3)
<Remainder>
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(56,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(59,62)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 0.660 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(59,62)
<Remainder, Distributed chunk1>
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(59,62)
<Distributed chunk2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(59,62)
<Remainder, Distributed chunk2>
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(59,62)
<Distributed chunk3>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between U1b line 88 and this line 93
   remark #15346: vector dependence: assumed FLOW dependence between this line 93 and U1b line 88
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(59,62)
<Remainder, Distributed chunk3>
LOOP END

LOOP BEGIN at tnt_array1d.h(256,2) inlined into driverLTM_openmp.cpp(65,42)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into driverLTM_openmp.cpp(65,42)
      remark #15389: vectorization support: reference p has unaligned access   [ tnt_array1d.h(257,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into driverLTM_openmp.cpp(65,42)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(82,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tnt_array1d_utils.h(163,3) inlined into driverLTM_openmp.cpp(83,10)
   <Peeled>
   LOOP END

   LOOP BEGIN at tnt_array1d_utils.h(163,3) inlined into driverLTM_openmp.cpp(83,10)
      remark #15388: vectorization support: reference data_ has aligned access   [ tnt_array1d_utils.h(165,6) ]
      remark #15388: vectorization support: reference data_ has aligned access   [ tnt_array1d_utils.h(165,6) ]
      remark #15389: vectorization support: reference B has unaligned access   [ tnt_array1d_utils.h(165,6) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 5.710 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at tnt_array1d_utils.h(163,3) inlined into driverLTM_openmp.cpp(83,10)
   <Remainder>
      remark #15389: vectorization support: reference data_ has unaligned access   [ tnt_array1d_utils.h(165,6) ]
      remark #15389: vectorization support: reference data_ has unaligned access   [ tnt_array1d_utils.h(165,6) ]
      remark #15389: vectorization support: reference B has unaligned access   [ tnt_array1d_utils.h(165,6) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at tnt_array1d_utils.h(163,3) inlined into driverLTM_openmp.cpp(83,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(87,27)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(97,3)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ tnt_i_refvec.h(182,3) ]
   remark #15382: vectorization support: call to function operator delete[](void *) cannot be vectorized   [ tnt_i_refvec.h(188,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between U21 line 221 and this line 192
   remark #15346: vector dependence: assumed FLOW dependence between this line 192 and U21 line 221
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(98,3)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between U7 line 547 and U7 line 249
   remark #15346: vector dependence: assumed FLOW dependence between U22 line 249 and U22 line 547
LOOP END

LOOP BEGIN at funclass.cpp(42,3) inlined into driverLTM_openmp.cpp(72,42)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at funclass.cpp(42,3) inlined into driverLTM_openmp.cpp(72,42)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at funclass.cpp(42,3) inlined into driverLTM_openmp.cpp(72,42)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(73,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(56,13)
   remark #15382: vectorization support: call to function RngStream::~RngStream(RngStream *) cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at driverLTM_openmp.cpp(56,13)
   remark #15382: vectorization support: call to function RngStream::~RngStream(RngStream *) cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END


Non-optimizable loops:


LOOP BEGIN at RngStream.cpp(205,5) inlined into driverLTM_openmp.cpp(55,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: RngStream::RngStream(RngStream *, const char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at RngStream.cpp(316,4)
   remark #15388: vectorization support: reference _ZN9RngStream8nextSeedE has aligned access   [ RngStream.cpp(317,23) ]
   remark #15389: vectorization support: reference this has unaligned access   [ RngStream.cpp(317,23) ]
   remark #15389: vectorization support: reference this has unaligned access   [ RngStream.cpp(317,15) ]
   remark #15389: vectorization support: reference this has unaligned access   [ RngStream.cpp(317,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 12 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 12 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at RngStream.cpp(316,4)
<Remainder>
LOOP END

LOOP BEGIN at RngStream.cpp(119,5) inlined into RngStream.cpp(320,4)
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(120,9) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(121,16) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(121,9) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(122,16) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(122,9) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(97,53) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(98,14) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(99,50) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(105,15) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(97,53) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(98,14) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(99,50) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(105,15) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(97,53) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(98,14) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(99,50) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(105,15) ]
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15460: masked strided loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 246 
   remark #15477: vector loop cost: 292.500 
   remark #15478: estimated potential speedup: 0.820 
   remark #15479: lightweight vector operations: 294 
   remark #15480: medium-overhead vector operations: 2 
   remark #15487: type converts: 21 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at RngStream.cpp(124,5) inlined into RngStream.cpp(320,4)
   remark #15388: vectorization support: reference _ZN9RngStream8nextSeedE has aligned access   [ RngStream.cpp(125,9) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(125,9) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at RngStream.cpp(124,5) inlined into RngStream.cpp(320,4)
<Remainder>
LOOP END

LOOP BEGIN at RngStream.cpp(119,5) inlined into RngStream.cpp(321,4)
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(120,9) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(121,16) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(121,9) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(122,16) ]
   remark #15388: vectorization support: reference x has aligned access   [ RngStream.cpp(122,9) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(97,53) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(98,14) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(99,50) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(105,15) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(97,53) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(98,14) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(99,50) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(105,15) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(97,53) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(98,14) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(99,50) ]
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.cpp(105,15) ]
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15460: masked strided loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 251 
   remark #15477: vector loop cost: 300.500 
   remark #15478: estimated potential speedup: 0.820 
   remark #15479: lightweight vector operations: 300 
   remark #15480: medium-overhead vector operations: 2 
   remark #15487: type converts: 21 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at RngStream.cpp(124,5) inlined into RngStream.cpp(321,4)
<Peeled>
LOOP END

LOOP BEGIN at RngStream.cpp(124,5) inlined into RngStream.cpp(321,4)
   remark #15388: vectorization support: reference _ZN9RngStream8nextSeedE has aligned access   [ RngStream.cpp(125,9) ]
   remark #15389: vectorization support: reference x has unaligned access   [ RngStream.cpp(125,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 1 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: funClass::genPats(int, int, int, TNT::Array2D<int> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at tnt_array2d.h(149,8) inlined into funclass.cpp(129,11)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at funclass.cpp(128,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between SI32 line 129 and patn line 129
      remark #15346: vector dependence: assumed ANTI dependence between patn line 129 and SI32 line 129
   LOOP END

   LOOP BEGIN at funclass.cpp(130,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between SI32 line 131 and patn line 131
      remark #15346: vector dependence: assumed ANTI dependence between patn line 131 and SI32 line 131
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: funClass::probFunc(TNT::Array1D<double> *, funClass *, const TNT::Array1D<double> &, const TNT::Array2D<int> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(71,59)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(71,59)
      remark #15389: vectorization support: reference p has unaligned access   [ tnt_array1d.h(257,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(71,59)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at tnt_array2d.h(117,2) inlined into funclass.cpp(71,59)
<Peeled>
LOOP END

LOOP BEGIN at tnt_array2d.h(117,2) inlined into funclass.cpp(71,59)
   remark #15389: vectorization support: reference data_ has unaligned access   [ tnt_array2d.h(119,6) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.250 
   remark #15478: estimated potential speedup: 4.400 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at tnt_array2d.h(117,2) inlined into funclass.cpp(71,59)
<Remainder>
LOOP END

LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(73,42)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(73,42)
      remark #15389: vectorization support: reference p has unaligned access   [ tnt_array1d.h(257,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(73,42)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(75,42)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(75,42)
      remark #15389: vectorization support: reference p has unaligned access   [ tnt_array1d.h(257,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(75,42)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at funclass.cpp(78,24)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at funclass.cpp(82,29)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at funclass.cpp(84,31)
      <Peeled>
      LOOP END

      LOOP BEGIN at funclass.cpp(84,31)
         remark #15389: vectorization support: reference data_ has unaligned access   [ funclass.cpp(85,6) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 1.250 
         remark #15478: estimated potential speedup: 5.430 
         remark #15479: lightweight vector operations: 5 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at funclass.cpp(84,31)
      <Remainder>
         remark #15389: vectorization support: reference data_ has unaligned access   [ funclass.cpp(85,6) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at funclass.cpp(84,31)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at tnt_array1d_utils.h(163,3) inlined into funclass.cpp(89,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between F64 line 165 and F64 line 165
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 165 and F64 line 165
   LOOP END

   LOOP BEGIN at tnt_array1d_utils.h(163,3) inlined into funclass.cpp(89,10)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: funClass::probMatFunc(TNT::Array2D<double> *, funClass *, double, const TNT::Array2D<int> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(50,42)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(50,42)
      remark #15389: vectorization support: reference p has unaligned access   [ tnt_array1d.h(257,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(50,42)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at funclass.cpp(52,27)
<Peeled, Multiversioned v1>
LOOP END

LOOP BEGIN at funclass.cpp(52,27)
<Multiversioned v1>
   remark #15389: vectorization support: reference this has unaligned access   [ funclass.cpp(53,24) ]
   remark #15389: vectorization support: reference data_ has unaligned access   [ funclass.cpp(53,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 143 
   remark #15477: vector loop cost: 28.750 
   remark #15478: estimated potential speedup: 4.710 
   remark #15479: lightweight vector operations: 13 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at funclass.cpp(52,27)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at funclass.cpp(52,27)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(57,58)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(57,58)
      remark #15389: vectorization support: reference p has unaligned access   [ tnt_array1d.h(257,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at tnt_array1d.h(256,2) inlined into funclass.cpp(57,58)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at tnt_array2d.h(117,2) inlined into funclass.cpp(57,58)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between P64.F64 line 119 and this line 119
   remark #15346: vector dependence: assumed ANTI dependence between this line 119 and P64.F64 line 119
LOOP END

LOOP BEGIN at tnt_array2d.h(117,2) inlined into funclass.cpp(57,58)
<Remainder>
LOOP END

LOOP BEGIN at funclass.cpp(58,27)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at funclass.cpp(59,29)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END
===========================================================================
