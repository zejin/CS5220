Source Line  Source                                                                   CPU Time  Spin Time  Overhead Time
-----------  -----------------------------------------------------------------------  --------  ---------  -------------
10           static const double PI = 3.14159265358979323846;                                                           
11                                                                                                                      
12           //                                                                                                         
13           double RngStream_RandNormal(RngStream g)                                                                   
14           {                                                                                                          
15             double u1 = RngStream_RandU01(g);                                        0.003s         0s             0s
16             double u2 = RngStream_RandU01(g);                                        0.001s         0s             0s
17                                                                                                                      
18             return sqrt(-2*log(u1)) * cos(2*PI*u2);                                  0.005s         0s             0s
19           }                                                                                                          
20                                                                                                                      
21           //                                                                                                         
22           void RngStream_RandShuffle(RngStream g, int* index, int n)                                                 
23           {                                                                                                          
24             int i, j, temp;                                                                                          
25             #pragma vector aligned                                                                                   
26             for (int i = n - 1; i > 0; --i) {                                        0.298s         0s             0s
27               j = RngStream_RandInt(g, 0, i);                                        0.614s         0s             0s
28                                                                                                                      
29               temp = index[i];                                                       0.123s         0s             0s
30               index[i] = index[j];                                                   0.823s         0s             0s
31               index[j] = temp;                                                                                       
32             }                                                                                                        
33           }                                                                                                          
34                                                                                                                      
35           // X is a pxn matrix, XX is a nxn matrix                                                                   
36           void Double_Center(int n, int p, double *X, double *XX) {                                                  
37             double* row_sum = (double*) calloc(n, sizeof(double));                                                   
38             double* col_sum = (double*) calloc(n, sizeof(double));                                                   
39                                                                                                                      
40             double total_sum = 0.0;                                                                                  
41             double elem, part_sum;                                                                                   
42             int i, j, k;                                                                                             
43                                                                                                                      
44             #pragma vector aligned                                                                                   
45             for (j = 0; j < n; ++j) {                                                                                
46               #pragma vector aligned                                                                                 
47               for (i = 0; i < n; ++i) {                                              0.065s         0s             0s
48                 if (i != j) {                                                        0.001s         0s             0s
49                   part_sum = 0.0;                                                    0.016s         0s             0s
50                                                                                                                      
51                   //XX[i, j] = |X[i, ] - X[j, ]|                                                                     
52                   for (k = 0; k < p; ++k) {                                          0.495s         0s             0s
53                     elem = X[i*p+k] - X[j*p+k];                                      0.173s         0s             0s
54                     part_sum += elem * elem;                                         0.133s         0s             0s
55                   }                                                                                                  
56                                                                                                                      
57                   part_sum = sqrt(part_sum);                                         0.001s         0s             0s
58                                                                                                                      
59                   XX[i+j*n] = part_sum;                                              0.005s         0s             0s
60                   row_sum[i] += part_sum;                                            0.381s         0s             0s
61                   col_sum[j] += part_sum;                                            0.146s         0s             0s
62                   total_sum += part_sum;                                             0.031s         0s             0s
63                 } else {                                                                                             
64                   XX[i+j*n] = 0.0;                                                   0.001s         0s             0s
65                 }                                                                                                    
66               }                                                                                                      
67             }                                                                                                        
68                                                                                                                      
69             #pragma vector aligned                                                                                   
70             for (j = 0; j < n; ++j) {                                                0.001s         0s             0s
71               #pragma vector aligned                                                                                 
72               for (i = 0; i < n; ++i) {                                              0.013s         0s             0s
73                 XX[i+j*n] -= row_sum[i] / n + col_sum[j] / n - total_sum / n / n;    0.066s         0s             0s
74               }                                                                                                      
75             }                                                                                                        
76                                                                                                                      
77             free(row_sum);                                                                                           
78             free(col_sum);                                                                                           
79           }                                                                                                          
80                                                                                                                      
81           // XX is a nxn matrix, YY is a nxn matrix                                                                  
82           double Inner_Prod(int n, double *XX, double *YY) {                                                         
83             double sum = 0.0;                                                                                        
84             int i, j;                                                                                                
85                                                                                                                      
86             #pragma vector aligned                                                                                   
87             for (j = 0; j < n; ++j) {                                                                                
88               #pragma vector aligned                                                                                 
89               for (i = 0; i < n; ++i) {                                              0.002s         0s             0s
90                 // XX[i, j] * YY[i, j]                                                                               
91                 sum += XX[i+j*n] * YY[i+j*n];                                        0.028s         0s             0s
92               }                                                                                                      
93             }                                                                                                        
94                                                                                                                      
95             return sum / n / n;                                                                                      
96           }                                                                                                          
97                                                                                                                      
98           // XX is a nxn matrix, YY is a nxn matrix                                                                  
99           double Inner_Prod_Perm(int n, int *P, double *XX, double *YY) {                                            
100            double sum = 0.0;                                                        0.002s         0s             0s
101            int i, j;                                                                                                
102                                                                                                                     
103            #pragma vector aligned                                                                                   
104            for (j = 0; j < n; ++j) {                                                0.031s         0s             0s
105              #pragma vector aligned                                                                                 
106              for (i = 0; i < n; ++i) {                                              2.688s         0s             0s
107                // XX[i, j] * YY[P[i], P[j]]                                                                         
108                sum += XX[i+j*n] * YY[P[i]+P[j]*n];                                 20.307s         0s             0s
109              }                                                                                                      
110            }                                                                                                        
111                                                                                                                     
112            return sum / n / n;                                                                                      
113          }                                                                                                          
114                                                                                                                     
115          //                                                                                                         
116          int main(int argc, char** argv)                                                                            
117          {                                                                                                          
118            //                                                                                                       
119            double t0 = omp_get_wtime();                                                                             
120                                                                                                                     
121            int i, j;                                                                                                
122            int nobs = 25;                                                                                           
123            int ndim = 5;                                                                                            
124            int nrep = 24;                                                                                           
125            int nperm = 100;                                                                                         
126            double alpha = 0.1;                                                                                      
127                                                                                                                     
128            extern char* optarg;                                                                                     
129            const char* optstring = "o:d:r:p:a:";                                                                    
130            int c;                                                                                                   
131            while ((c = getopt(argc, argv, optstring)) != -1) {                                                      
132              switch (c) {                                                                                           
133              case 'o': nobs = atoi(optarg); break; // number of observations                                        
134              case 'd': ndim = atoi(optarg); break; // number of dimensions                                          
135              case 'r': nrep = atoi(optarg); break; // number of repetitions                                         
136              case 'p': nperm = atoi(optarg); break; // number of permutations                                       
137              case 'a': alpha = atof(optarg); break; // significance level                                           
138              }                                                                                                      
139            }                                                                                                        
140                                                                                                                     
141            printf("====================\n");                                                                        
142            printf("nobs: %d\n", nobs);                                                                              
143            printf("ndim: %d\n", ndim);                                                                              
144            printf("nrep: %d\n", nrep);                                                                              
145            printf("nperm: %d\n", nperm);                                                                            
146            printf("alpha: %g\n", alpha);                                                                            
147                                                                                                                     
148            //                                                                                                       
149            unsigned long seed[6] = {1806547166, 3311292359,                                                         
150                         643431772, 1162448557,                                                                      
151                         3335719306, 4161054083};                                                                    
152            RngStream_SetPackageSeed(seed);                                                                          
153                                                                                                                     
154            RngStream RngArray[nrep];                                                                                
155            #pragma vector aligned                                                                                   
156            for (i = 0; i < nrep; ++i) {                                                                             
157              RngArray[i] = RngStream_CreateStream(NULL);                                                            
158            }                                                                                                        
159                                                                                                                     
160            //                                                                                                       
161            int* index;                                                                                              
162            double *x, *y, *xx, *yy;                                                                                 
163            double stat, stat_perm;                                                                                  
164            int count, local;                                                                                        
165            int global = 0;                                                                                          
166                                                                                                                     
167            index = (int*) malloc(nobs*sizeof(int));                                                                 
168            x = (double*) malloc(nobs*ndim*sizeof(double));                                                          
169            y = (double*) malloc(nobs*ndim*sizeof(double));                                                          
170            xx = (double*) malloc(nobs*nobs*sizeof(double));                                                         
171            yy = (double*) malloc(nobs*nobs*sizeof(double));                                                         
172            local = 0;                                                                                               
173                                                                                                                     
174            #pragma vector aligned                                                                                   
175            for (i = 0; i < nobs; ++i) {                                                                             
176              index[i] = i;                                                                                          
177            }                                                                                                        
178                                                                                                                     
179            #pragma vector aligned                                                                                   
180            for (j = 0; j < nrep; ++j) {                                                                             
181              #pragma vector aligned                                                                                 
182              for (i = 0; i < nobs*ndim; ++i) {                                                                      
183                x[i] = RngStream_RandNormal(RngArray[j]);                            0.005s         0s             0s
184              }                                                                                                      
185                                                                                                                     
186              #pragma vector aligned                                                                                 
187              for (i = 0; i < nobs*ndim; ++i) {                                      0.004s         0s             0s
188                y[i] = RngStream_RandNormal(RngArray[j]);                            0.005s         0s             0s
189              }                                                                                                      
190                                                                                                                     
191              Double_Center(nobs, ndim, x, xx);                                                                      
192              Double_Center(nobs, ndim, y, yy);                                                                      
193                                                                                                                     
194              stat = Inner_Prod(nobs, xx, yy);                                                                       
195              count = 0;                                                                                             
196                                                                                                                     
197              #pragma vector aligned                                                                                 
198              for (i = 0; i < nperm; ++i) {                                          0.007s         0s             0s
199                RngStream_RandShuffle(RngArray[j], index, nobs);                                                     
200                stat_perm = Inner_Prod_Perm(nobs, index, xx, yy);                                                    
201                if (stat_perm > stat) {                                                                              
202                  count += 1;                                                        0.009s         0s             0s
203                }                                                                                                    
204              }                                                                                                      
205                                                                                                                     
206              if ((double) count / nperm < alpha) {                                                                  
207                local += 1;                                                                                          
208              }                                                                                                      
209            }                                                                                                        
210                                                                                                                     
211            global += local;                                                                                         
212                                                                                                                     
213            free(index);                                                                                             
214            free(x);                                                                                                 
215            free(y);                                                                                                 
216            free(xx);                                                                                                
217            free(yy);                                                                                                
218                                                                                                                     
219            double t1 = omp_get_wtime();                                                                             
220                                                                                                                     
221            printf("====================\n");                                                                        
222            printf("size: %d / %d = %g\n", global, nrep, (double) global / nrep);                                    
223            printf("time: %g\n", t1-t0);                                                                             
224            printf("====================\n");                                                                        
225                                                                                                                     
226            return 0;                                                                                                
227          }                                                                                                          
