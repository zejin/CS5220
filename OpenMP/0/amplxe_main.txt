Source Line  Source                                                                   CPU Time  Spin Time  Overhead Time
-----------  -----------------------------------------------------------------------  --------  ---------  -------------
10           static const double PI = 3.14159265358979323846;                                                           
11                                                                                                                      
12           //                                                                                                         
13           double RngStream_RandNormal(RngStream g)                                                                   
14           {                                                                                                          
15             double u1 = RngStream_RandU01(g);                                        0.001s         0s             0s
16             double u2 = RngStream_RandU01(g);                                        0.003s         0s             0s
17                                                                                                                      
18             return sqrt(-2*log(u1)) * cos(2*PI*u2);                                  0.011s         0s             0s
19           }                                                                                                          
20                                                                                                                      
21           //                                                                                                         
22           void RngStream_RandShuffle(RngStream g, int* index, int n)                                                 
23           {                                                                                                          
24             int i, j, temp;                                                                                          
25             for (int i = n - 1; i > 0; --i) {                                        0.176s         0s             0s
26               j = RngStream_RandInt(g, 0, i);                                        0.467s         0s             0s
27                                                                                                                      
28               temp = index[i];                                                       0.001s         0s             0s
29               index[i] = index[j];                                                   0.721s         0s             0s
30               index[j] = temp;                                                                                       
31             }                                                                                                        
32           }                                                                                                          
33                                                                                                                      
34           // X is a pxn matrix, XX is a nxn matrix                                                                   
35           void Double_Center(int n, int p, double *X, double *XX) {                                                  
36             double* row_sum = (double*) calloc(n, sizeof(double));                                                   
37             double* col_sum = (double*) calloc(n, sizeof(double));                                                   
38                                                                                                                      
39             double total_sum = 0.0;                                                                                  
40             double elem, part_sum;                                                                                   
41             int i, j, k;                                                                                             
42                                                                                                                      
43             for (j = 0; j < n; ++j) {                                                0.001s         0s             0s
44               for (i = 0; i < n; ++i) {                                              0.067s         0s             0s
45                 if (i != j) {                                                        0.001s         0s             0s
46                   part_sum = 0.0;                                                                                    
47                                                                                                                      
48                   //XX[i, j] = |X[i, ] - X[j, ]|                                                                     
49                   for (k = 0; k < p; ++k) {                                          0.582s         0s             0s
50                     elem = X[i*p+k] - X[j*p+k];                                      0.203s         0s             0s
51                     part_sum += elem * elem;                                         0.106s         0s             0s
52                   }                                                                                                  
53                                                                                                                      
54                   part_sum = sqrt(part_sum);                                                                         
55                                                                                                                      
56                   XX[i+j*n] = part_sum;                                                                              
57                   row_sum[i] += part_sum;                                            0.136s         0s             0s
58                   col_sum[j] += part_sum;                                            0.337s         0s             0s
59                   total_sum += part_sum;                                                                             
60                 } else {                                                                                             
61                   XX[i+j*n] = 0.0;                                                                                   
62                 }                                                                                                    
63               }                                                                                                      
64             }                                                                                                        
65                                                                                                                      
66             for (j = 0; j < n; ++j) {                                                0.001s         0s             0s
67               for (i = 0; i < n; ++i) {                                              0.006s         0s             0s
68                 XX[i+j*n] -= row_sum[i] / n + col_sum[j] / n - total_sum / n / n;    0.415s         0s             0s
69               }                                                                                                      
70             }                                                                                                        
71                                                                                                                      
72             free(row_sum);                                                                                           
73             free(col_sum);                                                                                           
74           }                                                                                                          
75                                                                                                                      
76           // XX is a nxn matrix, YY is a nxn matrix                                                                  
77           double Inner_Prod(int n, double *XX, double *YY) {                                                         
78             double sum = 0.0;                                                        0.002s         0s             0s
79             int i, j;                                                                                                
80                                                                                                                      
81             for (j = 0; j < n; ++j) {                                                                                
82               for (i = 0; i < n; ++i) {                                              0.006s         0s             0s
83                 // XX[i, j] * YY[i, j]                                                                               
84                 sum += XX[i+j*n] * YY[i+j*n];                                        0.029s         0s             0s
85               }                                                                                                      
86             }                                                                                                        
87                                                                                                                      
88             return sum / n / n;                                                                                      
89           }                                                                                                          
90                                                                                                                      
91           // XX is a nxn matrix, YY is a nxn matrix                                                                  
92           double Inner_Prod_Perm(int n, int *P, double *XX, double *YY) {                                            
93             double sum = 0.0;                                                        0.647s         0s             0s
94             int i, j;                                                                                                
95                                                                                                                      
96             for (j = 0; j < n; ++j) {                                                0.021s         0s             0s
97               for (i = 0; i < n; ++i) {                                              4.637s         0s             0s
98                 // XX[i, j] * YY[P[i], P[j]]                                                                         
99                 sum += XX[i+j*n] * YY[P[i]+P[j]*n];                                 18.743s         0s             0s
100              }                                                                                                      
101            }                                                                                                        
102                                                                                                                     
103            return sum / n / n;                                                      0.021s         0s             0s
104          }                                                                                                          
105                                                                                                                     
106          //                                                                                                         
107          int main(int argc, char** argv)                                                                            
108          {                                                                                                          
109            //                                                                                                       
110            double t0 = omp_get_wtime();                                                                             
111                                                                                                                     
112            int i, j;                                                                                                
113            int nobs = 25;                                                                                           
114            int ndim = 5;                                                                                            
115            int nrep = 24;                                                                                           
116            int nperm = 100;                                                                                         
117            double alpha = 0.1;                                                                                      
118                                                                                                                     
119            extern char* optarg;                                                                                     
120            const char* optstring = "o:d:r:p:a:";                                                                    
121            int c;                                                                                                   
122            while ((c = getopt(argc, argv, optstring)) != -1) {                                                      
123              switch (c) {                                                                                           
124              case 'o': nobs = atoi(optarg); break; // number of observations                                        
125              case 'd': ndim = atoi(optarg); break; // number of dimensions                                          
126              case 'r': nrep = atoi(optarg); break; // number of repetitions                                         
127              case 'p': nperm = atoi(optarg); break; // number of permutations                                       
128              case 'a': alpha = atof(optarg); break; // significance level                                           
129              }                                                                                                      
130            }                                                                                                        
131                                                                                                                     
132            printf("====================\n");                                                                        
133            printf("nobs: %d\n", nobs);                                                                              
134            printf("ndim: %d\n", ndim);                                                                              
135            printf("nrep: %d\n", nrep);                                                                              
136            printf("nperm: %d\n", nperm);                                                                            
137            printf("alpha: %g\n", alpha);                                                                            
138                                                                                                                     
139            //                                                                                                       
140            unsigned long seed[6] = {1806547166, 3311292359,                                                         
141                         643431772, 1162448557,                                                                      
142                         3335719306, 4161054083};                                                                    
143            RngStream_SetPackageSeed(seed);                                                                          
144                                                                                                                     
145            RngStream RngArray[nrep];                                                                                
146            for (i = 0; i < nrep; ++i) {                                                                             
147              RngArray[i] = RngStream_CreateStream(NULL);                                                            
148            }                                                                                                        
149                                                                                                                     
150            //                                                                                                       
151            int* index;                                                                                              
152            double *x, *y, *xx, *yy;                                                                                 
153            double stat, stat_perm;                                                                                  
154            int count, local;                                                                                        
155            int global = 0;                                                                                          
156                                                                                                                     
157            index = (int*) malloc(nobs*sizeof(int));                                                                 
158            x = (double*) malloc(nobs*ndim*sizeof(double));                                                          
159            y = (double*) malloc(nobs*ndim*sizeof(double));                                                          
160            xx = (double*) malloc(nobs*nobs*sizeof(double));                                                         
161            yy = (double*) malloc(nobs*nobs*sizeof(double));                                                         
162            local = 0;                                                                                               
163                                                                                                                     
164            for (i = 0; i < nobs; ++i) {                                                                             
165              index[i] = i;                                                                                          
166            }                                                                                                        
167                                                                                                                     
168            for (j = 0; j < nrep; ++j) {                                                                             
169              for (i = 0; i < nobs*ndim; ++i) {                                      0.002s         0s             0s
170                x[i] = RngStream_RandNormal(RngArray[j]);                            0.004s         0s             0s
171              }                                                                                                      
172                                                                                                                     
173              for (i = 0; i < nobs*ndim; ++i) {                                                                      
174                y[i] = RngStream_RandNormal(RngArray[j]);                            0.006s         0s             0s
175              }                                                                                                      
176                                                                                                                     
177              Double_Center(nobs, ndim, x, xx);                                                                      
178              Double_Center(nobs, ndim, y, yy);                                                                      
179                                                                                                                     
180              stat = Inner_Prod(nobs, xx, yy);                                                                       
181              count = 0;                                                                                             
182                                                                                                                     
183              for (i = 0; i < nperm; ++i) {                                          0.002s         0s             0s
184                RngStream_RandShuffle(RngArray[j], index, nobs);                                                     
185                stat_perm = Inner_Prod_Perm(nobs, index, xx, yy);                                                    
186                if (stat_perm > stat) {                                                                              
187                  count += 1;                                                        0.037s         0s             0s
188                }                                                                                                    
189              }                                                                                                      
190                                                                                                                     
191              if ((double) count / nperm < alpha) {                                                                  
192                local += 1;                                                                                          
193              }                                                                                                      
194            }                                                                                                        
195                                                                                                                     
196            global += local;                                                                                         
197                                                                                                                     
198            free(index);                                                                                             
199            free(x);                                                                                                 
200            free(y);                                                                                                 
201            free(xx);                                                                                                
202            free(yy);                                                                                                
203                                                                                                                     
204            double t1 = omp_get_wtime();                                                                             
205                                                                                                                     
206            printf("====================\n");                                                                        
207            printf("size: %d / %d = %g\n", global, nrep, (double) global / nrep);                                    
208            printf("time: %g\n", t1-t0);                                                                             
209            printf("====================\n");                                                                        
210                                                                                                                     
211            return 0;                                                                                                
212          }                                                                                                          
