
Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at RngStream.c(277,4) inlined into sim.c(148,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at RngStream.c(382,4) inlined into sim.c(148,3)
   remark #15388: vectorization support: reference nextSeed has aligned access   [ RngStream.c(383,7) ]
   remark #15388: vectorization support: reference seed has aligned access   [ RngStream.c(383,7) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15410: vectorization support: conversion from int to float will be emulated   [ RngStream.c(383,21) ]
   remark #15399: vectorization support: unroll factor set to 3
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 0.920 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at sim.c(177,5)
<Peeled>
LOOP END

LOOP BEGIN at sim.c(177,5)
   remark #15388: vectorization support: reference index has aligned access   [ sim.c(178,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 4.810 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at sim.c(177,5)
<Remainder>
LOOP END

LOOP BEGIN at sim.c(43,3) inlined into sim.c(190,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sim.c(44,5) inlined into sim.c(190,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(190,7)
      <Peeled>
      LOOP END

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(190,7)
         remark #15388: vectorization support: reference x has aligned access   [ sim.c(50,11) ]
         remark #15388: vectorization support: reference x has aligned access   [ sim.c(50,11) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 6.500 
         remark #15478: estimated potential speedup: 3.080 
         remark #15479: lightweight vector operations: 11 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(190,7)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(190,7)
      <Remainder>
         remark #15389: vectorization support: reference x has unaligned access   [ sim.c(50,11) ]
         remark #15388: vectorization support: reference x has aligned access   [ sim.c(50,11) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(190,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at sim.c(66,3) inlined into sim.c(190,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(190,7)
   <Peeled>
   LOOP END

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(190,7)
      remark #15388: vectorization support: reference xx has aligned access   [ sim.c(68,7) ]
      remark #15388: vectorization support: reference xx has aligned access   [ sim.c(68,7) ]
      remark #15388: vectorization support: reference row_sum.778 has aligned access   [ sim.c(68,7) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 130 
      remark #15477: vector loop cost: 20.500 
      remark #15478: estimated potential speedup: 5.900 
      remark #15479: lightweight vector operations: 10 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(190,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(190,7)
   <Remainder>
      remark #15388: vectorization support: reference xx has aligned access   [ sim.c(68,7) ]
      remark #15388: vectorization support: reference xx has aligned access   [ sim.c(68,7) ]
      remark #15389: vectorization support: reference row_sum.778 has unaligned access   [ sim.c(68,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(190,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at sim.c(43,3) inlined into sim.c(191,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sim.c(44,5) inlined into sim.c(191,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(191,7)
      <Peeled>
      LOOP END

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(191,7)
         remark #15388: vectorization support: reference y has aligned access   [ sim.c(50,11) ]
         remark #15388: vectorization support: reference y has aligned access   [ sim.c(50,11) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 6.500 
         remark #15478: estimated potential speedup: 3.080 
         remark #15479: lightweight vector operations: 11 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(191,7)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(191,7)
      <Remainder>
         remark #15389: vectorization support: reference y has unaligned access   [ sim.c(50,11) ]
         remark #15388: vectorization support: reference y has aligned access   [ sim.c(50,11) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at sim.c(49,9) inlined into sim.c(191,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at sim.c(66,3) inlined into sim.c(191,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(191,7)
   <Peeled>
   LOOP END

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(191,7)
      remark #15388: vectorization support: reference yy has aligned access   [ sim.c(68,7) ]
      remark #15388: vectorization support: reference yy has aligned access   [ sim.c(68,7) ]
      remark #15388: vectorization support: reference row_sum.778 has aligned access   [ sim.c(68,7) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 130 
      remark #15477: vector loop cost: 20.500 
      remark #15478: estimated potential speedup: 5.900 
      remark #15479: lightweight vector operations: 10 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(191,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(191,7)
   <Remainder>
      remark #15388: vectorization support: reference yy has aligned access   [ sim.c(68,7) ]
      remark #15388: vectorization support: reference yy has aligned access   [ sim.c(68,7) ]
      remark #15389: vectorization support: reference row_sum.778 has unaligned access   [ sim.c(68,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at sim.c(67,5) inlined into sim.c(191,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at sim.c(81,3) inlined into sim.c(193,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sim.c(82,5) inlined into sim.c(193,14)
   <Peeled>
   LOOP END

   LOOP BEGIN at sim.c(82,5) inlined into sim.c(193,14)
      remark #15388: vectorization support: reference xx has aligned access   [ sim.c(84,7) ]
      remark #15388: vectorization support: reference yy has aligned access   [ sim.c(84,7) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 16 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 3.800 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at sim.c(82,5) inlined into sim.c(193,14)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at sim.c(82,5) inlined into sim.c(193,14)
   <Remainder>
      remark #15389: vectorization support: reference xx has unaligned access   [ sim.c(84,7) ]
      remark #15388: vectorization support: reference yy has aligned access   [ sim.c(84,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at sim.c(82,5) inlined into sim.c(193,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at sim.c(96,3) inlined into sim.c(198,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sim.c(97,5) inlined into sim.c(198,21)
   <Peeled>
   LOOP END

   LOOP BEGIN at sim.c(97,5) inlined into sim.c(198,21)
      remark #15388: vectorization support: reference xx has aligned access   [ sim.c(99,7) ]
      remark #15389: vectorization support: reference index has unaligned access   [ sim.c(99,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15458: masked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 22 
      remark #15477: vector loop cost: 8.500 
      remark #15478: estimated potential speedup: 2.520 
      remark #15479: lightweight vector operations: 8 
      remark #15480: medium-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at sim.c(97,5) inlined into sim.c(198,21)
   <Remainder>
      remark #15388: vectorization support: reference xx has aligned access   [ sim.c(99,7) ]
      remark #15389: vectorization support: reference index has unaligned access   [ sim.c(99,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at sim.c(97,5) inlined into sim.c(198,21)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at sim.c(123,3)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ sim.c(124,5) ]
LOOP END

LOOP BEGIN at RngStream.c(269,4) inlined into sim.c(148,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at sim.c(151,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ sim.c(152,19) ]
LOOP END

LOOP BEGIN at sim.c(181,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ sim.c(15,15) ]

   LOOP BEGIN at sim.c(182,7)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ sim.c(15,15) ]
   LOOP END

   LOOP BEGIN at sim.c(186,7)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ sim.c(15,15) ]
   LOOP END

   LOOP BEGIN at sim.c(196,7)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ RngStream.c(517,38) ]

      LOOP BEGIN at sim.c(25,3) inlined into sim.c(197,9)
         remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ RngStream.c(517,38) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: RngStream_CreateStream(const char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at RngStream.c(327,4)
   remark #15388: vectorization support: reference nextSeed has aligned access   [ RngStream.c(328,29) ]
   remark #15389: vectorization support: reference g has unaligned access   [ RngStream.c(328,29) ]
   remark #15389: vectorization support: reference g has unaligned access   [ RngStream.c(328,18) ]
   remark #15389: vectorization support: reference g has unaligned access   [ RngStream.c(328,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 9.000 
   remark #15478: estimated potential speedup: 1.270 
   remark #15479: lightweight vector operations: 11 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at RngStream.c(136,4) inlined into RngStream.c(330,4)
   remark #15388: vectorization support: reference nextSeed has aligned access   [ RngStream.c(137,7) ]
   remark #15388: vectorization support: reference x.179 has aligned access   [ RngStream.c(137,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at RngStream.c(136,4) inlined into RngStream.c(330,4)
<Remainder>
LOOP END

LOOP BEGIN at RngStream.c(136,4) inlined into RngStream.c(331,4)
<Peeled>
LOOP END

LOOP BEGIN at RngStream.c(136,4) inlined into RngStream.c(331,4)
   remark #15388: vectorization support: reference nextSeed has aligned access   [ RngStream.c(137,7) ]
   remark #15389: vectorization support: reference x.179 has unaligned access   [ RngStream.c(137,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 1 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at RngStream.c(131,4) inlined into RngStream.c(330,4)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

LOOP BEGIN at RngStream.c(131,4) inlined into RngStream.c(331,4)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END
===========================================================================
